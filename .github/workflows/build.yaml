name: build

on:
  push:
    branches:
      - main
    tags:
      - v*

jobs:
  enterprise:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: setup
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"
      - name: setup-qemu
        uses: docker/setup-qemu-action@v3
      - name: setup-buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
      - name: docker-login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: create-env-file
        run: |
          echo 'INTERCOM_APP_ID="${{ secrets.INTERCOM_APP_ID }}"' > frontend/.env
          echo 'SEGMENT_ID="${{ secrets.SEGMENT_ID }}"' >> frontend/.env
          echo 'SENTRY_AUTH_TOKEN="${{ secrets.SENTRY_AUTH_TOKEN }}"' >> frontend/.env
          echo 'SENTRY_ORG="${{ secrets.SENTRY_ORG }}"' >> frontend/.env
          echo 'SENTRY_PROJECT_ID="${{ secrets.SENTRY_PROJECT_ID }}"' >> frontend/.env
          echo 'SENTRY_DSN="${{ secrets.SENTRY_DSN }}"' >> frontend/.env
          echo 'TUNNEL_URL="${{ secrets.TUNNEL_URL }}"' >> frontend/.env
          echo 'TUNNEL_DOMAIN="${{ secrets.TUNNEL_DOMAIN }}"' >> frontend/.env
          echo 'POSTHOG_KEY="${{ secrets.POSTHOG_KEY }}"' >> frontend/.env
          echo 'CUSTOMERIO_ID="${{ secrets.CUSTOMERIO_ID }}"' >> frontend/.env
          echo 'CUSTOMERIO_SITE_ID="${{ secrets.CUSTOMERIO_SITE_ID }}"' >> frontend/.env
      - name: github-ref-info
        shell: bash
        run: |
          GH_REF=${{ github.ref }}
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            PREFIX="refs/tags/"
            echo "GH_IS_TAG=true" >> $GITHUB_ENV
            echo "GH_TAG=${GH_REF#$PREFIX}" >> $GITHUB_ENV
          else
            PREFIX="refs/heads/"
            echo "GH_IS_TAG=false" >> $GITHUB_ENV
            echo "GH_BRANCH_NAME=${GH_REF#$PREFIX}" >> $GITHUB_ENV
          fi
      - name: set-version
        run: |
          if [ '${{ env.GH_IS_TAG }}' == 'true' ]; then
            echo "VERSION=${{ env.GH_TAG }}" >> $GITHUB_ENV
          elif [ '${{ env.GH_BRANCH_NAME }}' == 'main' ]; then
            echo "VERSION=latest" >> $GITHUB_ENV
          else
            echo "VERSION=${{ env.GH_BRANCH_NAME }}" >> $GITHUB_ENV
          fi
      - name: cross-compilation-tools
        run: |
          set -ex
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu musl-tools
      - name: publish
        run: make docker-buildx-enterprise

  community:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: setup-go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"
      - name: setup-qemu
        uses: docker/setup-qemu-action@v3
      - name: setup-buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
      - name: docker-login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: github-ref-info
        shell: bash
        run: |
          GH_REF=${{ github.ref }}
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            PREFIX="refs/tags/"
            echo "GH_IS_TAG=true" >> $GITHUB_ENV
            echo "GH_TAG=${GH_REF#$PREFIX}" >> $GITHUB_ENV
          else
            PREFIX="refs/heads/"
            echo "GH_IS_TAG=false" >> $GITHUB_ENV
            echo "GH_BRANCH_NAME=${GH_REF#$PREFIX}" >> $GITHUB_ENV
          fi
      - name: set-version
        run: |
          if [ '${{ env.GH_IS_TAG }}' == 'true' ]; then
            echo "VERSION=${{ env.GH_TAG }}" >> $GITHUB_ENV
          elif [ '${{ env.GH_BRANCH_NAME }}' == 'main' ]; then
            echo "VERSION=latest" >> $GITHUB_ENV
          else
            echo "VERSION=${{ env.GH_BRANCH_NAME }}" >> $GITHUB_ENV
          fi
      - name: cross-compilation-tools
        run: |
          set -ex
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu musl-tools
      - name: publish
        run: make docker-buildx-community
