package sqlschema

import (
	"strings"

	"github.com/SigNoz/signoz/pkg/valuer"
)

var (
	IndexTypeUnique = IndexType{s: valuer.NewString("uq")}
	IndexTypeIndex  = IndexType{s: valuer.NewString("ix")}
)

type IndexType struct{ s valuer.String }

func (i IndexType) String() string {
	return i.s.String()
}

type Index interface {
	// The name of the index.
	//   - Indexes are named as `ix_<table_name>_<column_names>`. The column names are separated by underscores.
	//   - Unique constraints are named as `uk_<table_name>_<column_names>`. The column names are separated by underscores.
	// The name is autogenerated and should not be set by the user.
	Name() string

	// The type of the index.
	Type() IndexType

	// The columns that the index is applied to.
	Columns() []string

	// The SQL representation of the index.
	ToCreateSQL(fmter SQLFormatter) []byte
}

type UniqueIndex struct {
	TableName   string
	ColumnNames []string
}

func (index *UniqueIndex) Name() string {
	var b strings.Builder
	b.WriteString(IndexTypeUnique.String())
	b.WriteString("_")
	b.WriteString(index.TableName)
	b.WriteString("_")
	b.WriteString(strings.Join(index.ColumnNames, "_"))
	return b.String()
}

func (*UniqueIndex) Type() IndexType {
	return IndexTypeUnique
}

func (index *UniqueIndex) Columns() []string {
	return index.ColumnNames
}

func (index *UniqueIndex) ToCreateSQL(fmter SQLFormatter) []byte {
	sql := []byte{}

	sql = append(sql, "CREATE UNIQUE INDEX IF NOT EXISTS "...)
	sql = fmter.AppendIdent(sql, index.Name())
	sql = append(sql, " ON "...)
	sql = fmter.AppendIdent(sql, index.TableName)
	sql = append(sql, " ("...)

	for i, col := range index.ColumnNames {
		if i > 0 {
			sql = append(sql, ", "...)
		}

		sql = fmter.AppendIdent(sql, col)
	}

	sql = append(sql, ")"...)

	return sql
}
